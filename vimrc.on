"
"   FILE: ~/.vimrc
" AUTHOR: Mike Shapiro (mws)
"  DESCR: VIM configuration file
"
" Hacked up slightly by eschrock,
" and more by dap and more by rm

" Enable backspace to do everything
set backspace=indent,eol,start

" Use syntax highlighting and filetyping.  Additionally, ensure that Makefiles
" are all using the make syntax highlighting (and not based on their suffix).
:syntax on
:au BufRead,BufNewFile Makefile*        set filetype=make
:au BufRead,BufNewFile *.f		set filetype=c

" Highlight search results
set hlsearch
set incsearch

" File suffixes to ignore for editing selection (via :e).
set suffixes=.aux,.dvi,.gz,.idx,.log,.ps,.swp,.o,.tar,.tgz,~

" Cursor should never be more than 5 lines from the top or bottom
set scrolloff=5

" We generally want to just have 80 character lines
set tw=80

" File name tab completion should be more like the shell's
set wildmode=longest,list

" Use 8-space tabs
set shiftwidth=8

" Don't show me the begware screen.
set shortmess=I

" Don't rudely jump to the start of the line when moving up/down.
set nostartofline

set noexpandtab

" Keep 100 commands in the history
set history=100

" Always show the status line with ruler.  Don't show the mode name.
set laststatus=2 ruler showmode

" Treat . [ * special in patterns
set magic

" Do not interpret modeline directives in files we open (more secure)
set nomodeline

" Show matching (), {}, [] pairs
set showmatch

" Enable CSS in exported HTML (see :TOhtml)
let html_number_lines = 1
"let html_use_css = 1

" Emacs-like auto-indent for C (only indent when I hit tab in column 0)
set cinkeys=0{,0},:,0#,!0<Tab>,!^F

" Keep return types <t> and parameters <p> in K&R-style C at the left edge <0>
" Indent continuation lines/lines with unclosed parens 4 spaces <+4,(4,u4,U1>
" Don't indent case labels within a switch <:0>
set cinoptions=p0,t0,+4,(4,u0,U1,:0

" Activate C indenting and comment formatting when editing C or C++
autocmd BufEnter *.cc,*.c,*.h set fo=croq cindent comments=sr:/*,mb:*,el:*/
autocmd BufLeave *.cc,*.c,*.h set fo=tcql nocindent comments&

" Activate C comment formatting only when editing assembly
autocmd BufEnter *.il,*.s set fo=croq comments=sr:/*,mb:*,el:*/
autocmd BufLeave *.il,*.s set fo=tcql comments&

" Java
autocmd BufEnter *.java set fo=croq cindent comments=sr:/*,mb:*,el:*/
autocmd BufLeave *.java set fo=tcql nocindent comments&

" Line wrapping is off by default, 72 for email and other compositions.
" Specific file types have different widths.
set textwidth=0
autocmd BufEnter *.txt,*.eml	set textwidth=72
autocmd BufLeave *.txt,*.eml	set textwidth=0
autocmd BufEnter *.java,*.il,*.s,*.cc,*.c,*.h,*.f,*.js,*.sh	set textwidth=80
autocmd BufLeave *.java,*.il,*.s,*.cc,*.c,*.h,*.f,*.js,*.sh	set textwidth=0 
"autocmd BufEnter *.xml,*.html,Makefile*,makefile* set textwidth=0 nu
"autocmd BufLeave *.xml,*.html,Makefile*,makefile* set textwidth=0

" Buffer list shortcuts
nmap [b :buffers<C-m>:buffer
nmap [d :buffers<C-m>:bdelete

augroup Binary
  au!
  au BufReadPre  *.o let &bin=1
  au BufReadPost *.o if &bin | %!xxd
  au BufReadPost *.o set ft=xxd | endif
  au BufWritePre *.o if &bin | %!xxd -r
  au BufWritePre *.o endif
  au BufWritePost *.o if &bin | %!xxd
  au BufWritePost *.o set nomod | endif
augroup END

" Make sure we use the right colorscheme
colorscheme elflord

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" CSCOPE settings for vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" This file contains some boilerplate settings for vim's cscope interface,
"" plus some keyboard mappings that I've found useful.
""
"" USAGE:
"" -- vim 6:     Stick this file in your ~/.vim/plugin directory (or in a
""               'plugin' directory in some other directory that is in your
""               'runtimepath'.
""
"" -- vim 5:     Stick this file somewhere and 'source cscope.vim' it from
""               your ~/.vimrc file (or cut and paste it into your .vimrc).
""
"" NOTE:
"" These key maps use multiple keystrokes (2 or 3 keys).  If you find that
"" vim
"" keeps timing you out before you can complete them, try changing your
"" timeout
"" settings, as explained below.
""
"" Happy cscoping,
""
"" Jason Duell       jduell@alumni.princeton.edu     2002/3/7
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"" This tests to see if vim was configured with the '--enable-cscope' option
"" " when it was compiled.  If it wasn't, time to recompile vim...
if has("cscope")
set cscopeprg=/usr/bin/cscope-fast
"
"""""""""""""" Standard cscope/vim boilerplate
"
"" use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
set cscopetag
" 
"" check cscope for definition of a symbol before checking ctags: set to 1
""          " if you want the reverse search order.
set csto=0

" If we're in a workspace, we usually want to be editing from the source root so
" that cscope paths are correct.
"if $SRC != ""
"	cd $SRC
"endif

if filereadable("cscope.out")
    cs add cscope.out
elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
endif

set cscopeverbose

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

endif

